{"0": "count(DISTINCT name) FROM singer", "1": "select count(*) from singer", "2": ", country, age for all singers ordered by age from the oldest to the youngest. SELECT T2.name ,  T2.country ,  T2.age FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.name  =  T2.Singer_ID GROUP BY T2.name ORDER BY T2.age DESC", "3": "SELECT Name ,  Country ,  Age FROM singer ORDER BY Age DESC", "4": "the average, minimum, and maximum age of all singers from France.", "5": "the answer: SELECT avg(Age) ,  min(Age) ,  max(Age) FROM singer WHERE Country  =  \"France\"", "6": "the name and release year of the song by the oldest singer. Use the singer name and age for singer id 3491760.", "7": "the youngest singer? Return the name, the release year, and the song name. Give me the song name for both the youngest singer and the youngest song.", "8": "SELECT DISTINCT country FROM singer WHERE age  >  20", "9": "the number of singers for each country.", "10": "the average of their age. How many singers do we have? Which country has the most singers?", "11": "SELECT country ,  COUNT(*) FROM singer GROUP BY country", "12": "the average age. Find the corresponding singer name. List the average age. SELECT DISTINCT song_name ,  name ,  country FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "13": "SELECT Song_name FROM singer WHERE Age  >  Average", "14": "the songs of the most common singer from country \"China\". Return the average age of these singers. Show the singers' name.", "15": "the stadium names and locations. Sort the stadiums by location. SELECT T1.name ,  T2.location ,  T2.capacity FROM stadium AS T1 JOIN singer AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.capacity  =  \"5000\" OR T2.capacity  =  \"10000\" GROUP BY T1.location", "16": "SELECT Max(Capacity) ,  Max(Average) FROM stadium", "17": "the id, capacity and name of the stadium. Show the results in ascending order of capacity.", "18": "SELECT Name ,  Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "19": "the song title of singers born after 1997. Give me the name and the song title.", "20": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "21": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "22": "the number of singers in the lowest average capacity stadium.", "23": "SELECT stadium_id ,  count(*) FROM concert GROUP BY stadium_id", "24": "SELECT Name ,  capacity FROM stadium WHERE YEAR  >  2014 GROUP BY Name ORDER BY count(*) DESC LIMIT 1", "25": "the name and capacity of the stadium with the lowest capacity.", "26": "SELECT year FROM concert GROUP BY year HAVING count(*)  =  (SELECT count(*) FROM concert) / 2", "27": "SELECT YEAR FROM concert GROUP BY YEAR HAVING count(*)  =  (SELECT count(*) FROM concert)", "28": "the result as a set of strings. Give me the names. Show the names of the singers that are not on the concert of \"Song of the Year\". Give me the names of the singers that are on the concert of \"Song of the Year\". Give me the average ages of all the singers. Give me the average ages of male singers.", "29": "SELECT Name FROM stadium EXCEPT SELECT Name FROM concert", "30": "SELECT DISTINCT country FROM singer WHERE age  >  40 INTERSECT SELECT DISTINCT country FROM singer WHERE age  <  30", "31": "SELECT Name FROM stadium EXCEPT SELECT Name FROM concert WHERE YEAR  =  2014", "32": "SELECT name FROM stadium WHERE STADIUM_ID NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014)", "33": "SELECT t1.name ,  t2.Theme ,  COUNT(*) FROM concert AS t1 JOIN singer_in_concert AS t2 ON t1.concert_id  =  t2.concert_id GROUP BY t2.concert_id", "34": "SELECT name ,  theme ,  count(*) FROM singer_in_concert GROUP BY name ,  theme", "35": "SELECT T1.name ,  count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.name  =  T2.singer_id GROUP BY T1.name", "36": "SELECT singer_name ,  count(*) FROM singer_in_concert GROUP BY singer_name", "37": "the number of songs each singer has been a part of. List the songs in the order they appear in the list. SELECT T1.Name ,  count(DISTINCT T2.Song_Name) ,  T2.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Name  =  T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID  =  T3.concert_ID WHERE YEAR(T3.Year)  =  2014 GROUP BY T1.Name", "38": "SELECT T3.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.id  =  T2.singer_id JOIN concert AS T4 ON T2.concert_id  =  T4.concert_id WHERE T4.year  =  2014", "39": "the song that belongs to them. List both name and nation. Give me the name of the singer first and their nation.", "40": "SELECT name ,  country FROM singer WHERE song_name LIKE '%hey%'", "41": "the stadiums which never hosted any concerts. Sort the stadiums in decreasing capacity order.", "42": "the names and locations of the stadiums that had concerts in both years. SELECT T2.Name ,  T2.Location FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_ID  =  T2.concert_ID JOIN stadium AS T3 ON T3.Stadium_ID  =  T2.Stadium_ID WHERE T2.Year  =  \"2014\" INTERSECT SELECT T2.Name ,  T2.Location FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_ID  =  T2.concert_ID JOIN stadium AS T3 ON T3.Stadium_ID  =  T2.Stadium_ID WHERE T2.Year  =  \"2015\"", "43": "the average concert name of these concerts.", "44": "the year they occurred ? SELECT count(DISTINCT concert_name) ,  YEAR FROM concert GROUP BY YEAR HAVING count(DISTINCT concert_name)  =  (SELECT max(count(DISTINCT concert_name)) FROM concert)", "45": ". Give me the ids of the pets.\nGenerate SQL query: SELECT T1.PetID FROM Has_Pet AS T1 JOIN Pet AS T2 ON T1.PetID  =  T2.PetID WHERE T2.weight  >  10", "46": "SELECT count(*) FROM Petss WHERE weight  >  10", "47": "SELECT pet_weight FROM Pets WHERE pet_type  =  'dog' AND pet_age  =  (SELECT min(pet_age) FROM pets WHERE pet_type  =  'dog')", "48": "SELECT weight FROM Pets ORDER BY pet_age ASC LIMIT 1", "49": "SELECT pet_type ,  max(weight) FROM pets GROUP BY pet_type", "50": "the corresponding pet id. Give me the pet type and the corresponding maximum weight for each type. Give me the corresponding pet id. ORDER BY max(weight)", "51": "SELECT count(DISTINCT T2.stuid) FROM Has_pet AS T1 JOIN Student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.age  >  20", "52": "count(DISTINCT T1.PetID) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuID  =  T2.stuID WHERE T1.age  >  20", "53": "SELECT count(DISTINCT T2.StuID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Sex  =  \"F\" AND TYPE  =  \"dog\"", "54": "SELECT count(*) FROM Has_pet AS T1 JOIN Student AS T2 ON T1.stuid  =  T2.stuid WHERE T2.sex  =  'F' AND TYPE  =  'dog'", "55": "SELECT count(DISTINCT pet_type) FROM PETS", "56": "the number of pets of each type.", "57": "the names of students who have other pets. List the names of students in alphabetical order. List the number of students each type of pet has. Give me the type of the pet.", "58": ".Query: SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid JOIN pets AS t3 ON t2.petid  =  t3.petid WHERE t3.pettyp  =  'cat' INTERSECT SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid JOIN pets AS t3 ON t2.petid  =  t3.petid WHERE t3.pettyp  =  'dog'", "59": "SELECT T2.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"cat\" INTERSECT SELECT T2.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T3.pettype  =  \"dog\"", "60": "SELECT fname FROM Has_pet WHERE pettype  =  'cat' INTERSECT SELECT fname FROM Has_pet WHERE pettype  =  'dog'", "61": "SELECT major ,  age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE pettype  =  \"cat\")", "62": "SELECT t2.major ,  t2.age FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid WHERE type  =  'cat' INTERSECT SELECT t1.major ,  t2.age FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid WHERE type  =  'dog'", "63": "the corresponding first name. Find the id of those students who have a dog or other type of pet. Find the corresponding first name and last name of these students. List the ids of all students who have a cat.", "64": "List all the stuids of students who do not own cats.", "65": "the first name and age of these students. Give me the first name and age of the students.\nGenerate SQL query for this question: Show me the name of student who has both a cat and a dog as pets. Show me the name of the student.", "66": ": SELECT DISTINCT T1.Fname FROM Has_pet AS T1 JOIN STUDENT AS T2 ON T1.stuid  =  T2.stuid JOIN PETS AS T3 ON T2.petid  =  T3.petid WHERE T3.pet_type  =  'dog' INTERSECT SELECT DISTINCT T1.Fname FROM Has_pet AS T1 JOIN STUDENT AS T2 ON T1.stuid  =  T2.stuid JOIN PETS AS T3 ON T2.petid  =  T3.petid WHERE T3.pet_type  =  'dog' EXCEPT SELECT DISTINCT T1.Fname FROM Has_pet AS T1 JOIN STUDENT AS T2 ON T1.stuid  =  T2.stuid JOIN PETS AS T3 ON T2.petid  =  T3.petid WHERE T3.pet_type  =  'dog'", "67": "the first letter of that pet type and the total weight of that type of pets. Give me the corresponding answer. Type of pet is C for cat and D for dog.", "68": "SELECT pet_type ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)", "69": ". Give me the ids of the students who have the corresponding pets. Show me the advisors of these students.", "70": "SELECT petid ,  pet_age FROM pets WHERE pet_age  >  1", "71": "the list of average age and maximum age for each type of pet.", "72": "the list of ages and corresponding pet types.", "73": "SELECT avg(weight) ,  pet_type FROM Pets GROUP BY pet_type", "74": "SELECT avg(weight) ,  pet_type FROM PETS GROUP BY pet_type", "75": "Show me the first name of the students who have pet with type 1. SELECT T2.fname ,  T2.age FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.stuID  =  T2.stuID WHERE T1.petID IN (SELECT petID FROM pets WHERE pettype  =  \"1\")", "76": "SQL query: SELECT t2.fname ,  t1.age FROM Has_Pet AS t1 JOIN Student AS t2 ON t1.stuid  =  t2.stuid", "77": "the ids of all students with last name \u2018Smith\u2019 and their ids.", "78": ": SELECT T2.petid FROM Has_pet AS T1 JOIN pets AS T2 ON T1.petid  =  T2.petid WHERE T1.fname  =  \"Smith\"", "79": "SELECT count(*) ,  T1.stuID FROM Has_pet AS T1 JOIN STUDENT AS T2 ON T1.stuID  =  T2.stuID WHERE T1.petID  =  T2.petID", "80": "the ids.\nGenerate SQL query for this question: Show the ids and names of all the students who have pets . List the names and ids in separate columns.", "81": "the name and age of the student. Give me the names of students in alphabetical order.", "82": "SELECT DISTINCT T1.fname ,  T1.sex FROM Has_Pet AS T1 JOIN STUDENT AS T2 ON T1.stuid  =  T2.stuid GROUP BY T2.stuid HAVING count(*)  >  1", "83": ". SELECT t2.lname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid JOIN pets AS t3 ON t2.petid  =  t3.petid WHERE t3.pettype  =  \"cat\" AND t3.weight  =  3", "84": ": SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_pet WHERE PetType  =  \"cat\" AND pet_age  =  3)", "85": "the result. Give me the average age.", "86": "SELECT avg(t1.age) FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid  =  t2.stuid WHERE t2.petid  =  ' '", "87": "? SELECT count(DISTINCT continent) FROM continents", "88": "SELECT count(*) FROM continents", "89": "SELECT continent ,  continent_name ,  count(*) FROM continents GROUP BY continent", "90": "SELECT ContId ,  ContName ,  COUNT(*) FROM countries GROUP BY ContId", "91": "SELECT count(*) FROM countries", "92": "SELECT count(DISTINCT country_name) FROM countries", "93": ".", "94": "SELECT fullname ,  id ,  count(DISTINCT model) FROM car_makers GROUP BY fullname", "95": "SELECT model FROM car_names ORDER BY horsepower ASC LIMIT 1", "96": "SELECT Model FROM cars_data ORDER BY horsepower LIMIT 1", "97": "SELECT model FROM car_names GROUP BY model HAVING weight  <  (SELECT avg(weight) FROM car_names)", "98": "SELECT Model FROM car_names WHERE weight  <  (SELECT avg(weight) FROM car_names)", "99": "SELECT T1.make FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.make = T2.make WHERE T2.Year  =  1970", "100": "SELECT DISTINCT T3.FullName FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id JOIN car_names AS T3 ON T1.Model  =  T3.Model WHERE YEAR  =  1970", "101": "SELECT make ,  YEAR FROM car_names", "102": "SELECT T2.maker ,  T3.year FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.maker  =  T2.id JOIN car_names AS T3 ON T1.make  =  T3.make"}